# don't need a service for postgres if either production or staging
{{ if or (eq .Values.environment "production") (eq .Values.environment "staging") }}
{{ else }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.appName }}-init-db-script
data:
  init-extra-dbs.sh: |
    {{ range .Files.Lines "files/init_extra_dbs.sh" }}
     {{ . }}{{ end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.appName }}-postgres
  annotations:
    git-commit: {{ .Values.gitSha }}
    karpenter.sh/do-not-evict: "true"
    karpenter.sh/do-not-disrupt: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.appName }}-postgres
  template:
    metadata:
      labels:
        app: {{ .Values.appName }}-postgres
    spec:
      {{- include "node-affinity-tolerations" . | nindent 6 }}
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret }}
      containers:
      - name: postgres
      {{ if eq .Values.environment "local" }}
        image: postgres:latest
      {{ else }}
        image: {{ .Values.image.registry }}/ecr-public/docker/library/postgres:13.14-alpine3.19
      {{ end }}
        resources:
          requests:
            cpu: "600m"
          limits:
            cpu: "1000m" 
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: demo
        - name: POSTGRES_USER
          value: {{ .Values.secrets.database.username }}
        - name: POSTGRES_PASSWORD
          value: {{ .Values.secrets.database.password }}
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata/pgdata
        - name: POSTGRES_EXTRA_DATABASES
          value: demo:demo
        volumeMounts:
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
{{ if not (eq .Values.forChecks true) }}
        - name: db-data
          mountPath: /var/lib/postgresql/data/pgdata
{{ end }}
      volumes:
        - name: init-scripts
          configMap:
            name: {{ .Values.appName }}-init-db-script
{{ if not (eq .Values.forChecks true) }}
        - name: db-data
          persistentVolumeClaim:
            claimName: {{ .Values.appName }}-postgres-pvc
{{ end }}
---
{{ if not (eq .Values.environment "local") }}
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: {{ .Values.appName }}-postgres
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ .Values.appName }}-postgres
  minReplicas: 1
  maxReplicas: 1
{{ if not (eq .Values.forChecks true) }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Values.appName }}-postgres-pvc
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
{{ end }}
{{ end }}
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: {{ .Values.appName }}-postgres
  annotations:
    git-commit: {{ .Values.gitSha }}
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: {{ .Values.appName }}-postgres
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.appName }}-postgres
spec:
  selector:
    app: {{ .Values.appName }}-postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
---
{{ end }}
